package com.epam.test.dataprovider;

import com.epam.task2.composite.Component;
import com.epam.task2.composite.ComponentType;
import com.epam.task2.composite.impl.TextComposite;
import com.epam.task2.composite.impl.TextSymbol;
import org.testng.annotations.DataProvider;

import java.util.ArrayList;
import java.util.List;

public class StaticDataProvider {

    @DataProvider(name = "read text")
    public static Object[] text() {
        String text = "    It has survived - not only (five) centuries, but also the leap into 13+5 electronic typesetting, remaining 3+5 essentially 6+9*(3-4) unchanged. It was popularised in the 5*(1*2*(3*(4*(5-7+4)-3)-2)-1) with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n"
                + "    It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using (71-(2*5*(3*(2-1/2*2)-2)-10/2))*7 Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using (Content here), content here, making it look like readable English.\n"
                + "    It is a (-5+1/2*(2+5*2-7))*1200 established fact that a reader will be of a page when looking at its layout.\n"
                + "    Bye.\n";
        return new Object[]{text};
    }

    @DataProvider(name = "parsed text")
    public static Object[] parsedText() {
        Component it = new TextComposite(ComponentType.LEXEME);
        it.add(new TextSymbol("I", ComponentType.LETTER_OR_DIGIT));
        it.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component has = new TextComposite(ComponentType.LEXEME);
        has.add(new TextSymbol("h", ComponentType.LETTER_OR_DIGIT));
        has.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        has.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        Component survived = new TextComposite(ComponentType.LEXEME);
        survived.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        Component punkt = new TextComposite(ComponentType.LEXEME);
        punkt.add(new TextSymbol("-", ComponentType.PUNCTUATION));
        Component not = new TextComposite(ComponentType.LEXEME);
        not.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        not.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        not.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component only = new TextComposite(ComponentType.LEXEME);
        only.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("y", ComponentType.LETTER_OR_DIGIT));
        Component five = new TextComposite(ComponentType.LEXEME);
        five.add(new TextSymbol("f", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        Component centuries = new TextComposite(ComponentType.LEXEME);
        centuries.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component firstSentence = new TextComposite(ComponentType.SENTENCE);
        firstSentence.add(it);
        firstSentence.add(has);
        firstSentence.add(survived);
        firstSentence.add(punkt);
        firstSentence.add(not);
        firstSentence.add(only);
        firstSentence.add(five);
        firstSentence.add(centuries);
        Component but = new TextComposite(ComponentType.LEXEME);
        but.add(new TextSymbol("B", ComponentType.LETTER_OR_DIGIT));
        but.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        but.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component also = new TextComposite(ComponentType.LEXEME);
        also.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        also.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        also.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        also.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        Component the = new TextComposite(ComponentType.LEXEME);
        the.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        the.add(new TextSymbol("h", ComponentType.LETTER_OR_DIGIT));
        the.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        Component leap = new TextComposite(ComponentType.LEXEME);
        leap.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        leap.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        leap.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        leap.add(new TextSymbol("p", ComponentType.LETTER_OR_DIGIT));
        Component into = new TextComposite(ComponentType.LEXEME);
        into.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        into.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        into.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        into.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        Component eighteen = new TextComposite(ComponentType.LEXEME);
        eighteen.add(new TextSymbol("18", ComponentType.LETTER_OR_DIGIT));
        Component electronic = new TextComposite(ComponentType.LEXEME);
        electronic.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        Component typesetting = new TextComposite(ComponentType.LEXEME);
        typesetting.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("y", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("p", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("g", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component secondSentence = new TextComposite(ComponentType.SENTENCE);
        secondSentence.add(but);
        secondSentence.add(also);
        secondSentence.add(the);
        secondSentence.add(leap);
        secondSentence.add(into);
        secondSentence.add(eighteen);
        secondSentence.add(electronic);
        secondSentence.add(typesetting);
        Component it2 = new TextComposite(ComponentType.LEXEME);
        it2.add(new TextSymbol("I", ComponentType.LETTER_OR_DIGIT));
        it2.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component is = new TextComposite(ComponentType.LEXEME);
        is.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        is.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        Component a = new TextComposite(ComponentType.LEXEME);
        a.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        Component fact = new TextComposite(ComponentType.LEXEME);
        fact.add(new TextSymbol("f", ComponentType.LETTER_OR_DIGIT));
        fact.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        fact.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        fact.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        fact.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component thirdSentence = new TextComposite(ComponentType.SENTENCE);
        thirdSentence.add(it2);
        thirdSentence.add(is);
        thirdSentence.add(a);
        thirdSentence.add(fact);
        Component reader = new TextComposite(ComponentType.LEXEME);
        reader.add(new TextSymbol("R", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        Component will = new TextComposite(ComponentType.LEXEME);
        will.add(new TextSymbol("w", ComponentType.LETTER_OR_DIGIT));
        will.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        will.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        Component be = new TextComposite(ComponentType.LEXEME);
        be.add(new TextSymbol("b", ComponentType.LETTER_OR_DIGIT));
        be.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        Component distracted = new TextComposite(ComponentType.LEXEME);
        distracted.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component fourthSentence = new TextComposite(ComponentType.SENTENCE);
        fourthSentence.add(reader);
        fourthSentence.add(will);
        fourthSentence.add(be);
        fourthSentence.add(distracted);
        Component firstParagraph = new TextComposite(ComponentType.PARAGRAPH);
        firstParagraph.add(firstSentence);
        firstParagraph.add(secondSentence);
        Component secondParagraph = new TextComposite(ComponentType.PARAGRAPH);
        secondParagraph.add(thirdSentence);
        secondParagraph.add(fourthSentence);
        List<Component> paragraphs = new ArrayList<>();
        paragraphs.add(firstParagraph);
        paragraphs.add(secondParagraph);
        return new Object[]{paragraphs};
    }

    @DataProvider(name = "parsed paragraph")
    public static Object[] parsedParagraph() {
        Component it = new TextComposite(ComponentType.LEXEME);
        it.add(new TextSymbol("I", ComponentType.LETTER_OR_DIGIT));
        it.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component has = new TextComposite(ComponentType.LEXEME);
        has.add(new TextSymbol("h", ComponentType.LETTER_OR_DIGIT));
        has.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        has.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        Component survived = new TextComposite(ComponentType.LEXEME);
        survived.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        Component punkt = new TextComposite(ComponentType.LEXEME);
        punkt.add(new TextSymbol("-", ComponentType.PUNCTUATION));
        Component not = new TextComposite(ComponentType.LEXEME);
        not.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        not.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        not.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component only = new TextComposite(ComponentType.LEXEME);
        only.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("y", ComponentType.LETTER_OR_DIGIT));
        Component five = new TextComposite(ComponentType.LEXEME);
        five.add(new TextSymbol("f", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        Component centuries = new TextComposite(ComponentType.LEXEME);
        centuries.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component firstSentence = new TextComposite(ComponentType.SENTENCE);
        firstSentence.add(it);
        firstSentence.add(has);
        firstSentence.add(survived);
        firstSentence.add(punkt);
        firstSentence.add(not);
        firstSentence.add(only);
        firstSentence.add(five);
        firstSentence.add(centuries);
        Component but = new TextComposite(ComponentType.LEXEME);
        but.add(new TextSymbol("B", ComponentType.LETTER_OR_DIGIT));
        but.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        but.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component also = new TextComposite(ComponentType.LEXEME);
        also.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        also.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        also.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        also.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        Component the = new TextComposite(ComponentType.LEXEME);
        the.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        the.add(new TextSymbol("h", ComponentType.LETTER_OR_DIGIT));
        the.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        Component leap = new TextComposite(ComponentType.LEXEME);
        leap.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        leap.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        leap.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        leap.add(new TextSymbol("p", ComponentType.LETTER_OR_DIGIT));
        Component into = new TextComposite(ComponentType.LEXEME);
        into.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        into.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        into.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        into.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        Component eighteen = new TextComposite(ComponentType.LEXEME);
        eighteen.add(new TextSymbol("18", ComponentType.LETTER_OR_DIGIT));
        Component electronic = new TextComposite(ComponentType.LEXEME);
        electronic.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        electronic.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        Component typesetting = new TextComposite(ComponentType.LEXEME);
        typesetting.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("y", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("p", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol("g", ComponentType.LETTER_OR_DIGIT));
        typesetting.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component secondSentence = new TextComposite(ComponentType.SENTENCE);
        secondSentence.add(but);
        secondSentence.add(also);
        secondSentence.add(the);
        secondSentence.add(leap);
        secondSentence.add(into);
        secondSentence.add(eighteen);
        secondSentence.add(electronic);
        secondSentence.add(typesetting);
        Component thirdSentence = new TextComposite(ComponentType.SENTENCE);
        List<Component> sentences = new ArrayList<>();
        sentences.add(firstSentence);
        sentences.add(secondSentence);
        sentences.add(thirdSentence);
        return new Object[]{sentences};
    }

    @DataProvider(name = "parsed sentence")
    public static Object[] parsedSentence() {
        Component it = new TextComposite(ComponentType.LEXEME);
        it.add(new TextSymbol("I", ComponentType.LETTER_OR_DIGIT));
        it.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component has = new TextComposite(ComponentType.LEXEME);
        has.add(new TextSymbol("h", ComponentType.LETTER_OR_DIGIT));
        has.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        has.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        Component survived = new TextComposite(ComponentType.LEXEME);
        survived.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        Component punkt = new TextComposite(ComponentType.LEXEME);
        punkt.add(new TextSymbol("-", ComponentType.PUNCTUATION));
        Component not = new TextComposite(ComponentType.LEXEME);
        not.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        not.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        not.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component only = new TextComposite(ComponentType.LEXEME);
        only.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("y", ComponentType.LETTER_OR_DIGIT));
        Component five = new TextComposite(ComponentType.LEXEME);
        five.add(new TextSymbol("f", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        Component centuries = new TextComposite(ComponentType.LEXEME);
        centuries.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        List<Component> sentence = new ArrayList<>();
        sentence.add(it);
        sentence.add(has);
        sentence.add(survived);
        sentence.add(punkt);
        sentence.add(not);
        sentence.add(only);
        sentence.add(five);
        sentence.add(centuries);
        return new Object[]{sentence};
    }

    @DataProvider(name = "parsed lexeme")
    public static Object[] parsedLexeme() {
        Component i = new TextSymbol("I", ComponentType.LETTER_OR_DIGIT);
        Component t = new TextSymbol("t", ComponentType.LETTER_OR_DIGIT);
        List<Component> symbols = new ArrayList<>();
        symbols.add(i);
        symbols.add(t);
        return new Object[]{symbols};
    }

    @DataProvider(name = "sorted paragraphs")
    public static Object[][] sortedParagraph() {
        Component it = new TextComposite(ComponentType.LEXEME);
        it.add(new TextSymbol("I", ComponentType.LETTER_OR_DIGIT));
        it.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component has = new TextComposite(ComponentType.LEXEME);
        has.add(new TextSymbol("h", ComponentType.LETTER_OR_DIGIT));
        has.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        has.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        Component survived = new TextComposite(ComponentType.LEXEME);
        survived.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        survived.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        Component punkt = new TextComposite(ComponentType.LEXEME);
        punkt.add(new TextSymbol("-", ComponentType.PUNCTUATION));
        Component not = new TextComposite(ComponentType.LEXEME);
        not.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        not.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        not.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component only = new TextComposite(ComponentType.LEXEME);
        only.add(new TextSymbol("o", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        only.add(new TextSymbol("y", ComponentType.LETTER_OR_DIGIT));
        Component five = new TextComposite(ComponentType.LEXEME);
        five.add(new TextSymbol("f", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("v", ComponentType.LETTER_OR_DIGIT));
        five.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        Component centuries = new TextComposite(ComponentType.LEXEME);
        centuries.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("n", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("u", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        centuries.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component firstSentence = new TextComposite(ComponentType.SENTENCE);
        firstSentence.add(it);
        firstSentence.add(has);
        firstSentence.add(survived);
        firstSentence.add(punkt);
        firstSentence.add(not);
        firstSentence.add(only);
        firstSentence.add(five);
        firstSentence.add(centuries);
        Component it2 = new TextComposite(ComponentType.LEXEME);
        it2.add(new TextSymbol("I", ComponentType.LETTER_OR_DIGIT));
        it2.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        Component is = new TextComposite(ComponentType.LEXEME);
        is.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        is.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        Component a = new TextComposite(ComponentType.LEXEME);
        a.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        Component fact = new TextComposite(ComponentType.LEXEME);
        fact.add(new TextSymbol("f", ComponentType.LETTER_OR_DIGIT));
        fact.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        fact.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        fact.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        fact.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component thirdSentence = new TextComposite(ComponentType.SENTENCE);
        thirdSentence.add(it2);
        thirdSentence.add(is);
        thirdSentence.add(a);
        thirdSentence.add(fact);
        Component reader = new TextComposite(ComponentType.LEXEME);
        reader.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        reader.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        Component will = new TextComposite(ComponentType.LEXEME);
        will.add(new TextSymbol("w", ComponentType.LETTER_OR_DIGIT));
        will.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        will.add(new TextSymbol("l", ComponentType.LETTER_OR_DIGIT));
        Component be = new TextComposite(ComponentType.LEXEME);
        be.add(new TextSymbol("b", ComponentType.LETTER_OR_DIGIT));
        be.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        Component distracted = new TextComposite(ComponentType.LEXEME);
        distracted.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("i", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("s", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("r", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("a", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("c", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("t", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("e", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol("d", ComponentType.LETTER_OR_DIGIT));
        distracted.add(new TextSymbol(".", ComponentType.PUNCTUATION));
        Component fourthSentence = new TextComposite(ComponentType.SENTENCE);
        fourthSentence.add(reader);
        fourthSentence.add(will);
        fourthSentence.add(be);
        fourthSentence.add(distracted);
        Component firstParagraph = new TextComposite(ComponentType.PARAGRAPH);
        firstParagraph.add(firstSentence);
        Component secondParagraph = new TextComposite(ComponentType.PARAGRAPH);
        secondParagraph.add(thirdSentence);
        secondParagraph.add(fourthSentence);
        Component text = new TextComposite(ComponentType.TEXT);
        text.add(firstParagraph);
        text.add(secondParagraph);
        Component sortedText = new TextComposite(ComponentType.TEXT);
        sortedText.add(secondParagraph);
        sortedText.add(firstParagraph);
        return new Object[][]{{text}, {sortedText}};
    }
}

